
### **1. Expanded System Architecture Flow**
- **Frontend Framework:**  
  - Angular for dynamic user interfaces, state management using `RxJS`.  
  - **Fabric.js:** For drawing, layer management, and canvas rendering.  
  - CSS/SCSS for responsive styling and theme consistency.

- **Backend Framework:**  
  - Node.js with **Express.js** for routing.  
  - RESTful APIs for data exchange.  
  - Socket.io for bidirectional real-time communication.  
  - AI Modules (e.g., TensorFlow.js or pre-trained APIs like OpenAI for handwriting recognition).

- **Database:**
  - MySQL for storing structured data like users, sessions, and saved canvas states.

- **AI Model Hosting:**
  - Hosted either on the same server or a separate containerized environment (e.g., Docker) for **predictive drawing suggestions** and handwriting recognition.

---

### **2. Complete User Flow**
#### **Step 1: User Registration**
1. **Signup Process:**
   - User provides:
     - Name, Email, Password, Profile Picture (optional).  
   - Form validations:
     - **Password Requirements:** Minimum length, uppercase/lowercase, symbols.  
     - Email Regex Validation: Ensures correct email structure.
   - Data is encrypted and sent to `/api/auth/register`.  
   - If registration is successful:
     - A **verification email** is triggered via a third-party service (e.g., SendGrid).  

2. **Email Verification:**
   - Verification links expire in **24 hours**. Clicking the link activates the account.

---

#### **Step 2: Login and Authentication**
- Upon login:
  - Angular handles form validation.  
  - Backend generates a **JWT token** upon successful login:
    - Includes user role (`admin` or `collaborator`), session timeout, and permissions.
  - Token is stored in **HttpOnly cookies** or `localStorage` for session continuity.

---

### **3. Real-Time Collaboration Flow**
#### **3.1 Joining a Session**
- **Flow Details:**
  - The session creator generates a unique link (e.g., `/session/12345`).  
  - Collaborators use the link to join the room.  
  - Backend validates:
    - Token authenticity.
    - Role permissions (e.g., admin can save sessions; collaborators cannot).  
  - Users are added to a **Socket.io room** for session communication.

---

#### **3.2 Real-Time Drawing**
- **Frontend Details:**
  - Each stroke is captured as:
    - **`x, y` Coordinates**.
    - Color, size, and tool type.  
  - Data is **debounced** to avoid overwhelming the backend with frequent updates.  

- **Backend Details:**
  - Stroke data is broadcast to all participants in the session using:
    ```javascript
    io.to(roomID).emit("updateCanvas", strokeData);
    ```
  - Stroke events are queued for temporary storage in case of disconnection.

- **Error Handling:**
  - If a collaborator disconnects:
    - Their strokes are queued locally until reconnection.
    - A **reconnection attempt** is made every 5 seconds.

---

### **4. AI-Assisted Features: In Depth**
#### **4.1 Shape Prediction**
- **Flow:**
  1. User draws an irregular shape.  
  2. The stroke is sent to `/api/ai/shapePredict`:
     - Processed by a **pre-trained ML model**.
  3. Predicted output includes:
     ```json
     {
       "type": "circle",
       "center": { "x": 200, "y": 150 },
       "radius": 50
     }
     ```
  4. A semi-transparent preview is displayed on the canvas, allowing the user to accept or reject it.

#### **4.2 Handwriting Recognition**
- **Flow:**
  1. User writes freehand text on the canvas.  
  2. The stroke data is sent to `/api/ai/textRecognition`.  
  3. The backend processes it using **Tesseract.js** or an external OCR service:
     ```json
     {
       "detectedText": "Collaborate Now!"
     }
     ```
  4. The recognized text is editable before placement.

#### **4.3 Predictive Suggestions**
- **Details:**
  - The AI observes frequent patterns (e.g., similar shapes or repeated text).
  - Suggests auto-completion or enhancements (e.g., alignment, resizing).

---

### **5. Session Management**
#### **5.1 Saving Sessions**
- Canvas data is serialized as **JSON**, containing:
  - Object layers (strokes, text, shapes).  
  - Metadata (session creator, timestamp).  

#### **5.2 Loading Sessions**
- When a user loads a saved session:
  - A GET request retrieves serialized JSON from the database.
  - The canvas is reconstructed using the Fabric.js `loadFromJSON()` function.

---

### **6. Enhanced Security Measures**
#### **6.1 Authentication**
- JWT tokens are refreshed periodically without re-login.
- Secure tokens stored in cookies with **HttpOnly** and **SameSite** flags.

#### **6.2 Data Encryption**
- All sensitive data is encrypted using **AES-256** before database insertion.

#### **6.3 Audit Logs**
- Every major action (e.g., saving a session, joining a room) is logged for troubleshooting.

---

### **7. Performance Optimizations**
1. **Frontend:**
   - **Lazy Loading:** Angular modules are only loaded when accessed.  
   - **Debouncing Events:** Reduces frequent backend calls during rapid drawing.  

2. **Backend:**
   - **Redis Cache:** Frequently accessed sessions are cached for faster retrieval.  
   - **Load Balancing:** Multiple instances of the backend ensure scalability.  

3. **Database:**
   - Indexed tables for faster queries.
   - Periodic backups for data integrity.

---

### **8. Edge Cases Addressed**
1. **Network Interruption:**
   - Local canvas changes are saved temporarily using IndexedDB.
   - Upon reconnection, changes are synced with the backend.

2. **Concurrent User Conflicts:**
   - Lock mechanisms prevent overwriting of objects.

3. **High Latency:**
   - Clients with slow connections receive compressed, lower-resolution updates.

---

### **9. Deployment**
- **Frontend Hosting:** Deployed via Netlify or Vercel.
- **Backend Hosting:** Node.js server hosted on AWS EC2 or DigitalOcean.
- **Database Hosting:** MySQL hosted via Amazon RDS with periodic backups.

